from dotenv import load_dotenv
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from stations import OPTIONS, BUTTON_NAMES
import random

load_dotenv()
BOT_TOKEN = os.getenv('TELEGRAM_BOT')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

# Sticker IDs
STICKERS = {
    'welcome': "CAACAgIAAxkBAAENOsRnRxxxz0py523T_b1eXia6n8DeRgACig4AAtEh8EkHpmbhWHEjLjYE",
    'admin_only': "CAACAgIAAxkBAAENOsZnRxycMewnQH4n9UGIVLB84OHchgACTg8AAv7T8Un3r_YZptnhwTYE",
    'not_started': "CAACAgIAAxkBAAENOshnRxzOaH8MLgw6V4kuD7_ph2ueIgACQgsAAr8d8En10koHIoNIwDYE",
    'voted': "CAACAgIAAxkBAAENOspnRxzZ-Sf5P7VOJqm7FVc2szUs1wACiAsAAoCB8EmzCVuNQkIAAUk2BA",
    'answer': "CAACAgIAAxkBAAENOtdnRyCauFrBLJ8rnO6v3tUJfz6J_AACYQ0AAhyC6EmrSbjm6IWGCDYE",
}

# Global poll state
active_poll = {
    'is_active': False,
    'votes': {},
    'creator_id': None,
    'participants': set(),  # –•—Ä–∞–Ω–µ–Ω–∏–µ ID –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    'pending_votes': {},  # –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    'admin_message_id': None,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —É –∞–¥–º–∏–Ω–∞
    'impressions': {  # –•—Ä–∞–Ω–µ–Ω–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        'like': 0,
        'neutral': 0,
        'dislike': 0
    }
}

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
waiting_users = set()

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π
IMPRESSIONS_BUTTONS = [
    InlineKeyboardButton("–ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data="impression_like"),
    InlineKeyboardButton("–Ω–µ –∑–Ω–∞—é", callback_data="impression_neutral"),
    InlineKeyboardButton("–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data="impression_dislike")
]

async def create_poll_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(BUTTON_NAMES["1"], callback_data="vote_1"),
            InlineKeyboardButton(BUTTON_NAMES["7"], callback_data="vote_7")
        ],
 
        [
            InlineKeyboardButton(BUTTON_NAMES["2"], callback_data="vote_2"),
            InlineKeyboardButton(BUTTON_NAMES["8"], callback_data="vote_8")
        ],

        [
            InlineKeyboardButton(BUTTON_NAMES["3"], callback_data="vote_3"),
            InlineKeyboardButton(BUTTON_NAMES["9"], callback_data="vote_9")
        ],
       
        [
            InlineKeyboardButton(BUTTON_NAMES["4"], callback_data="vote_4"),
            InlineKeyboardButton(BUTTON_NAMES["10"], callback_data="vote_10")
        ],
     
        [
            InlineKeyboardButton(BUTTON_NAMES["5"], callback_data="vote_5"),
            InlineKeyboardButton(BUTTON_NAMES["11"], callback_data="vote_11")
        ],

        [
            InlineKeyboardButton(BUTTON_NAMES["6"], callback_data="vote_6"),
            InlineKeyboardButton(BUTTON_NAMES["12"], callback_data="vote_12")
        ]
    ]
    return keyboard

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not active_poll['is_active']:
        await update.message.reply_sticker(STICKERS['not_started'])
        await update.message.reply_text(
            "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!\n"
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä, –µ—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        await update.message.reply_sticker(STICKERS['welcome'])
        keyboard = await create_poll_keyboard()
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –ö–∞–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?\n\n"
            "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:\n\n",
            reply_markup=reply_markup
        )

async def start_poll(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_sticker(STICKERS['admin_only'])
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!")
        return
        
    if active_poll['is_active']:
        await update.message.reply_text("–û–ø—Ä–æ—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return
        
    active_poll['is_active'] = True
    active_poll['votes'] = {}
    active_poll['creator_id'] = update.message.from_user.id
    active_poll['participants'].clear()
    active_poll['pending_votes'].clear()
    active_poll['admin_message_id'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    active_poll['impressions'] = {'like': 0, 'neutral': 0, 'dislike': 0}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è
    
    keyboard = await create_poll_keyboard()
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –ö–∞–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?\n\n"
        "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=reply_markup
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞–≤—à–∏—Ö –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    for user_id in waiting_users:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data="vote_start")]
                ])
            )
        except Exception as e:
            pass  # –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
    waiting_users.clear()

async def end_poll(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_sticker(STICKERS['admin_only'])
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!")
        return
        
    if not active_poll['is_active']:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")
        return
        
    results = await show_results()
    active_poll['is_active'] = False
    active_poll['admin_message_id'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    for user_id in active_poll['participants']:
        try:
            await context.bot.send_message(chat_id=user_id, text=results)
        except Exception as e:
            pass  # –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –∞–¥–º–∏–Ω—É
    impressions_summary = (
        f"üìä –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        f"üëç –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: {active_poll['impressions']['like']}\n"
        f"ü§î –ù–µ –∑–Ω–∞—é: {active_poll['impressions']['neutral']}\n"
        f"üëé –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: {active_poll['impressions']['dislike']}"
    )
    await update.message.reply_text(impressions_summary)
    
    await update.message.reply_text(results)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = update.effective_user.id
    
    await query.answer()
    
    if query.data.startswith("vote_"):
        if not active_poll['is_active']:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä
            await context.bot.send_sticker(
                chat_id=query.message.chat_id,
                sticker=STICKERS['answer']
            )
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.edit_text("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ
        if user_id in active_poll['participants']:
            await query.message.reply_sticker(STICKERS['admin_only'])
            await query.message.reply_text("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
            return
            
        option = query.data.split("_")[1]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_keyboard = [
            [
                InlineKeyboardButton("–î–∞ ‚úÖ", callback_data=f"confirm_{option}"),
                InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="cancel_vote")
            ]
        ]
        confirm_markup = InlineKeyboardMarkup(confirm_keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        active_poll['pending_votes'][user_id] = option
        
        await query.message.edit_text(
            f"üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –ö–∞–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?\n\n"
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n{OPTIONS[option]}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä?",
            reply_markup=confirm_markup
        )
    
    elif query.data.startswith("confirm_"):
        option = query.data.split("_")[1]
        if user_id in active_poll['pending_votes']:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≥–æ–ª–æ—Å
            active_poll['votes'][option] = active_poll['votes'].get(option, 0) + 1
            active_poll['participants'].add(user_id)
            del active_poll['pending_votes'][user_id]
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –≤–æ–ø—Ä–æ—Å
            await query.message.edit_text(
                f"–í–∞—à –≥–æ–ª–æ—Å –∑–∞ {OPTIONS[option]} —É—á—Ç–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            await context.bot.send_sticker(
                chat_id=query.message.chat_id,
                sticker=STICKERS['voted']
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
            await update_admin_results(context)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è—Ö
            await query.message.reply_text(
                "–ö–∞–∫–∏–µ –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –±–æ–ª—å—à–æ–π –ø–µ—Ä–µ–º–µ–Ω—ã?",
                reply_markup=InlineKeyboardMarkup([IMPRESSIONS_BUTTONS])
            )

    elif query.data == "cancel_vote":
        if user_id in active_poll['pending_votes']:
            del active_poll['pending_votes'][user_id]
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            keyboard = await create_poll_keyboard()
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.edit_text(
                "üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –ö–∞–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=reply_markup
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π
    elif query.data.startswith("impression_"):
        impression = query.data.split("_")[1]
        if impression == "like":
            active_poll['impressions']['like'] += 1
            await query.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.")
        elif impression == "neutral":
            active_poll['impressions']['neutral'] += 1
            await query.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ.")
        elif impression == "dislike":
            active_poll['impressions']['dislike'] += 1
            await query.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ù–∞–º –∂–∞–ª—å, —á—Ç–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.")

async def show_results():
    results = []
    total_votes = sum(active_poll['votes'].values())
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π —Å –∏—Ö –≥–æ–ª–æ—Å–∞–º–∏
    stations_results = []
    for option_id, option_name in BUTTON_NAMES.items():
        votes = active_poll['votes'].get(option_id, 0)
        percentage = (votes / total_votes * 100) if total_votes > 0 else 0
        stations_results.append({
            'id': option_id,
            'name': option_name,
            'votes': votes,
            'percentage': percentage
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    stations_results.sort(key=lambda x: (-x['votes'], x['id']))
    
    # –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
    winner = stations_results[0] if stations_results and stations_results[0]['votes'] > 0 else None
    
    header = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n\n"
    if winner:
        header += f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner['name']}\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for i, station in enumerate(stations_results, 1):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–æ–Ω—É –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        prefix = "üëë " if winner and station['id'] == winner['id'] else "   "
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞
        place = f"{i}. "
        results.append(f"{prefix}{place}{station['name']}: {station['votes']} –≥–æ–ª–æ—Å–æ–≤ ({station['percentage']:.1f}%)")
    
    return header + "\n".join(results)

async def update_admin_results(context: ContextTypes.DEFAULT_TYPE):
    if not active_poll['is_active']:
        return
        
    results = await show_results()
    
    try:
        if active_poll['admin_message_id'] is None:
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"{results}\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏"
            )
            active_poll['admin_message_id'] = message.message_id
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.edit_message_text(
                chat_id=ADMIN_ID,
                message_id=active_poll['admin_message_id'],
                text=f"{results}\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏"
            )
    except Exception as e:
        pass  # –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("startpoll", start_poll))
    application.add_handler(CommandHandler("endpoll", end_poll))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")))

    application.run_polling(poll_interval=1.0)

if __name__ == '__main__':
    main()